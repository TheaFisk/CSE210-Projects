
// Goal manager class to handle all operations
public class GoalManager
{
    private List<Goal> _goals;
    private int _score;

    public GoalManager()
    {
        _goals = new List<Goal>();
        _score = 0;
    }

    public void Start()
    {
        int choice = -1;
        while (choice != 6)
        {
            DisplayPlayerInfo();
            DisplayMenu();
            
            string response = Console.ReadLine();
            if (int.TryParse(response, out choice))
            {
                switch (choice)
                {
                    case 1:
                        CreateGoal();
                        break;
                    case 2:
                        ListGoalDetails();
                        break;
                    case 3:
                        SaveGoals();
                        break;
                    case 4:
                        LoadGoals();
                        break;
                    case 5:
                        RecordEvent();
                        break;
                    case 6:
                        Console.WriteLine("Goodbye!");
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a number.");
            }
        }
    }

    private void DisplayPlayerInfo()
    {
        Console.WriteLine($"\nYou have {_score} points.\n");
    }

    private void DisplayMenu()
    {
        Console.WriteLine("Menu Options:");
        Console.WriteLine("  1. Create New Goal");
        Console.WriteLine("  2. List Goals");
        Console.WriteLine("  3. Save Goals");
        Console.WriteLine("  4. Load Goals");
        Console.WriteLine("  5. Record Event");
        Console.WriteLine("  6. Quit");
        Console.Write("Select a choice from the menu: ");
    }

    private void CreateGoal()
    {
        Console.WriteLine("\nThe types of Goals are:");
        Console.WriteLine("  1. Simple Goal");
        Console.WriteLine("  2. Eternal Goal");
        Console.WriteLine("  3. Checklist Goal");
        Console.Write("Which type of goal would you like to create? ");
        
        string response = Console.ReadLine();
        if (int.TryParse(response, out int choice))
        {
            Console.Write("What is the name of your goal? ");
            string name = Console.ReadLine();
            
            Console.Write("What is a short description of it? ");
            string description = Console.ReadLine();
            
            Console.Write("What is the amount of points associated with this goal? ");
            string pointsInput = Console.ReadLine();
            
            if (int.TryParse(pointsInput, out int points))
            {
                switch (choice)
                {
                    case 1:
                        _goals.Add(new SimpleGoal(name, description, points));
                        break;
                    case 2:
                        _goals.Add(new EternalGoal(name, description, points));
                        break;
                    case 3:
                        Console.Write("How many times does this goal need to be accomplished for a bonus? ");
                        string targetInput = Console.ReadLine();
                        Console.Write("What is the bonus for accomplishing it that many times? ");
                        string bonusInput = Console.ReadLine();
                        
                        if (int.TryParse(targetInput, out int target) && int.TryParse(bonusInput, out int bonus))
                        {
                            _goals.Add(new ChecklistGoal(name, description, points, target, bonus));
                        }
                        else
                        {
                            Console.WriteLine("Invalid input for target or bonus.");
                        }
                        break;
                    default:
                        Console.WriteLine("Invalid goal type.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid points input.");
            }
        }
        else
        {
            Console.WriteLine("Invalid choice.");
        }
    }

    private void ListGoalDetails()
    {
        Console.WriteLine("\nThe goals are:");
        for (int i = 0; i < _goals.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {_goals[i].GetDetailsString()}");
        }
    }

    private void SaveGoals()
    {
        Console.Write("What is the filename for the goal file? ");
        string filename = Console.ReadLine();
        
        try
        {
            using (StreamWriter outputFile = new StreamWriter(filename))
            {
                outputFile.WriteLine(_score);
                foreach (Goal goal in _goals)
                {
                    outputFile.WriteLine(goal.GetStringRepresentation());
                }
            }
            Console.WriteLine("Goals saved successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving goals: {ex.Message}");
        }
    }

    private void LoadGoals()
    {
        Console.Write("What is the filename for the goal file? ");
        string filename = Console.ReadLine();
        
        try
        {
            string[] lines = File.ReadAllLines(filename);
            _score = int.Parse(lines[0]);
            _goals.Clear();
            
            for (int i = 1; i < lines.Length; i++)
            {
                string[] parts = lines[i].Split(':');
                string goalType = parts[0];
                string goalData = parts[1];
                
                Goal goal = null;
                switch (goalType)
                {
                    case "SimpleGoal":
                        goal = new SimpleGoal("", "", 0).CreateFromString(goalData);
                        break;
                    case "EternalGoal":
                        goal = new EternalGoal("", "", 0).CreateFromString(goalData);
                        break;
                    case "ChecklistGoal":
                        goal = new ChecklistGoal("", "", 0, 0, 0).CreateFromString(goalData);
                        break;
                }
                
                if (goal != null)
                {
                    _goals.Add(goal);
                }
            }
            Console.WriteLine("Goals loaded successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading goals: {ex.Message}");
        }
    }

    private void RecordEvent()
    {
        ListGoalDetails();
        Console.Write("Which goal did you accomplish? ");
        string response = Console.ReadLine();
        
        if (int.TryParse(response, out int choice) && choice > 0 && choice <= _goals.Count)
        {
            Goal selectedGoal = _goals[choice - 1];
            int pointsEarned = selectedGoal.RecordEvent();
            
            if (pointsEarned > 0)
            {
                _score += pointsEarned;
                Console.WriteLine($"Congratulations! You have earned {pointsEarned} points!");
                Console.WriteLine($"You now have {_score} points.");
            }
            else
            {
                Console.WriteLine("This goal has already been completed or cannot be recorded.");
            }
        }
        else
        {
            Console.WriteLine("Invalid choice.");
        }
    }
}
